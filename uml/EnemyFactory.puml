@startuml
abstract class AbstractEnemyFactory{
    # baseHp:double
    # {static} baseSpeed:int
    + {abstract} create():AbstractEnemy
    + {abstract} getHp():int
    + getBaseHp():double
    + setBaseHp(double):void
    + {static} getBaseSpeed():int
    + {static} setBaseSpeed(int):void
}
class MobEnemyFactory{
    + create():MobEnemy
    + getHp():int
}
class EliteEnemyFactory{
    + create():EliteEnemy
    + getHp():int
}
class BossEnemyFactory{
    + create():BossEnemy
    + getHp():int
}

AbstractEnemyFactory <|-- MobEnemyFactory
AbstractEnemyFactory <|-- EliteEnemyFactory
AbstractEnemyFactory <|-- BossEnemyFactory

abstract class AbstractEnemy {
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} getScore():int
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY)
    + getScore():int
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY)
    + getScore():int
}

class BossEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + getScore():int
}

AbstractEnemy <|-- MobEnemy
AbstractEnemy <|-- EliteEnemy
AbstractEnemy <|-- BossEnemy
MobEnemyFactory ..> MobEnemy : <<create>>
EliteEnemyFactory ..> EliteEnemy : <<create>>
BossEnemyFactory ..> BossEnemy : <<create>>

abstract class BaseGame {
    - AbstractEnemy:List<AbstractEnemy>
    - enemyFactories:List<AbstractEnemyFactory>
}

BaseGame --> AbstractEnemyFactory
BaseGame --> AbstractEnemy
@enduml