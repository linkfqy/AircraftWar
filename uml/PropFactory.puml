@startuml
abstract class AbstractPropFactory {
    - {static} timeToVanish:int
    + {static} getTimeToVanish():int
    + {static} setTimeToVanish(int time):void
    + create(AbstractEnemy enemy):AbstractProp
    + {abstract} pureCreate(AbstractEnemy enemy):AbstractProp
}
class FirePropFactory {
    + pureCreate(AbstractEnemy enemy):FireProp
}
class LifePropFactory {
    + pureCreate(AbstractEnemy enemy):LifeProp
}
class BombPropFactory {
    + pureCreate(AbstractEnemy enemy):BombProp
}

AbstractPropFactory <|-- FirePropFactory
AbstractPropFactory <|-- LifePropFactory
AbstractPropFactory <|-- BombPropFactory

abstract class AbstractProp {
    + AbstractProp(int locationX, int locationY)
    + forward():void
    + work(AbstractAircraft aircraft):void
    + work():int
}

class LifeProp {
    + LifeProp(int locationX, int locationY)
    + work(AbstractAircraft aircraft):void
}

class BombProp {
    - subscribers:List<AbstractFlyingObject>
    + BombProp(int locationX, int locationY)
    + work():int
    + addSubscriber(AbstractFlyingObject):void
    + notifySubscribers():void
}

class FireProp {
    + BombProp(int locationX, int locationY)
    + work(AbstractAircraft aircraft):void
}

AbstractProp <|-- LifeProp
AbstractProp <|-- BombProp
AbstractProp <|-- FireProp
LifePropFactory ..> LifeProp : <<create>>
BombPropFactory ..> BombProp : <<create>>
FirePropFactory ..> FireProp : <<create>>

abstract class BaseGame {
    - props:List<AbstractProp>
    - propFactories:List<AbstractPropFactory>
    + action():void
}

BaseGame --> AbstractPropFactory
BaseGame --> AbstractProp
@enduml